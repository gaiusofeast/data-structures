//Infix to Postfix Conversion
#include <stdio.h> 
#include <stdlib.h>
 #include<strings.h>

struct Node
{
char data;
struct Node *next;
}*top=NULL;


void push(char x)
{
struct Node *t;
t=(struct Node*)malloc(sizeof(struct Node));

if(t==NULL)
printf("stack is full\n");
 
else
{


}
 


t->data=x;
t->next=top; top=t;
 

}

char pop()
{
struct Node *t; char x=-1;

if(top==NULL)
printf("Stack is Empty\n"); else
{
t=top;
top=top->next;
 
x=t->data; free(t);
}
return x;
}

void Display()
{
struct Node *p; p=top; while(p!=NULL)
{
printf("%d ",p->data); p=p->next;
}
printf("\n");
}

int isBalanced(char *exp)
{
int i;

for(i=0;exp[i]!='\0';i++)
{
if(exp[i]=='(')
push(exp[i]);
else if(exp[i]==')')
{
if(top==NULL)
return 0; pop();
}
}
if(top==NULL)
return 1; else
return 0;
}
int isOperand(char x){
    if (x == '+' || x == '-' || x == '*' || x == '/' ||
        x == '^' || x == '(' || x == ')'||x=='_'){
        return 0;
    }
    return 1;
}
int isEmpty()
{
 if(top==NULL)
 return 0;
 return 1;
}
 
int outPrecedence(char x){
    if (x == '+' || x == '-'){
        return 1;
    } else if (x == '*' || x == '/'){
        return 3;
    } else if (x == '^'){
        return 6;
    } else if (x == '_'){
        return 8;
    } else if (x == '('){
        return 9;
    } else if (x == ')'){
        return 0;
        
    }
    return -1;
}
 
int inPrecedence(char x){
    if (x == '+' || x == '-'){
        return 2;
    } else if (x == '*' || x == '/'){
        return 4;
    } else if (x == '^'){
        return 5;
    } else if (x == '_'){
        return 7;
    } else if (x == '('){
        return 0;    
    }
    return -1;
}
int Eval(char *postfix)
{
int i=0;
int x1,x2,r=0 ;

for(i=0;postfix[i]!='\0';i++)
{
if(isOperand(postfix[i]))
{
push(postfix[i]-'0');
//printf("%d",postfix[i]);
}
else
{
 if(postfix[i]=='_')
{ x1=pop();
printf("reached here   ");
   r=-x1;
 push(r);
}
else{
x2=pop();
//printf("%d",x2+0);
x1=pop();
switch(postfix[i])
{
case '+':r=x1+x2; break; 
case '-':r=x1-x2; break; 
case '*':r=x1*x2; break; 
case '/':r=x1/x2; break;
}
push(r);
}
}
}
return top->data;
}



char * InToPost(char *infix)
{
int i=0,j=0; char *postfix;
int len=strlen(infix);
postfix=(char *)malloc((len+2)*sizeof(char));

    while (infix[i] != '\0'){
        if (isOperand(infix[i])){
            postfix[j++] = infix[i++];
        } else {
            if (!isEmpty()||outPrecedence(infix[i]) > inPrecedence(top->data)){
                push(infix[i++]);
            } else if (outPrecedence(infix[i]) == inPrecedence(top->data)){
               //postfix[j++]=pop();
            pop();
            i++;
        
            }
            else {
               //postfix[j++] = top->data;
                postfix[j++]=pop();
            }
        }
    }
 
    while(top!=NULL) 
    postfix[j++]=pop();
 //pop();
postfix[j]='\0'; 
return postfix;
}


int main()
{
char *infix="(_(1*2)/3)^14+110-220*16.78*364.621";
//push('#');

char *postfix=InToPost(infix); 
printf("%s ",postfix);
printf("Result is %d\n",Eval(postfix));


return 0;
}
    
